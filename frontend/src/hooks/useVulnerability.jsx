import { useState, useEffect } from 'react';
import { useQuery } from "react-query";
import { cveService } from "@/services";
import { first } from 'lodash';

// ----------------------------------------------------------------------

const mapReferences = (references) => {
    const uniqueReferences = new Set();
    references?.forEach((ref) => {
        const url = ref.url;
        uniqueReferences.add(url);
    });
    // Convertir l'ensemble en tableau
    return Array.from(uniqueReferences);
};

const mapWeaknesses = (weaknesses) => {
    const uniqueWeaknesses = new Set();
    weaknesses?.forEach((weakness) => {
        const description = weakness.description;
        uniqueWeaknesses.add(description);
    });
    // Convertir l'ensemble en tableau
    return Array.from(uniqueWeaknesses);
};

const mapMetrics = (metrics) => {
    const uniqueMetrics = new Set();
    metrics?.forEach((metric) => {
        const {severity, baseScore, impactScore, exploitabilityScore, vector} = metric;
        uniqueMetrics.add({ severity, baseScore, impactScore, exploitabilityScore, vector });
    });
    
    return Array.from(uniqueMetrics);
};

const mapAffectedProducts = (affectedProducts) => {
    const uniqueAffectedProducts = new Set();
    affectedProducts?.forEach((affectedProduct) => {
        const { cpe } = affectedProduct;
        const [, , , vendor, product, version = 'N/A', ...rest] = cpe.split(':');
        uniqueAffectedProducts.add({ vendor, product, version, cpe });
    });
    // Convertir l'ensemble en tableau
    return Array.from(uniqueAffectedProducts);
};

// ----------------------------------------------------------------------


export default function useVulnerability(cveId){

    const [vulnerability, setVulnerability] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    // const cveId = 'CVE-2024-2854';


    const { data, isLoading: isQueryLoading, error ,isFetched} = useQuery(
        ['cve', cveId], 
        () => cveService.getVulnerabilityByCve(cveId), {
        keepPreviousData: true,
        refetchOnWindowFocus: false,
        enabled: !!cveId,
        onSuccess: () => setIsLoading(false),
        onError: () => setIsLoading(false),
    });


    useEffect(() => {
        if (isFetched) {
            const formatedData = formatVulnerability(data);
            if (formatedData) { // Vérifiez si formatedData est défini avant de l'utiliser
                setVulnerability(formatedData);
                setIsLoading(false);
            }
        }
    }, [data]);

    useEffect(() => {
        setIsLoading(isQueryLoading);
    }, [isQueryLoading]);

    useEffect(() => {
        if (error) {
          console.error('Error in useVulnerability:', error);
        }
    }, [error]);

    return { vulnerability, isLoading };

}


function formatVulnerability(data) {

    const formatedData = {
        cve: data.cveId,
        vendor: data.vendor,
        description: data.description,
        product: data.product,
        sourceIdentifier: data.sourceIdentifier ?? 'Mitre',
        published: data.published,
        updated: data.lastModified,
        weakness:first(mapWeaknesses(data.weaknesses)),
        affected: mapAffectedProducts(data.affected),
        references: mapReferences(data.references),
        metrics: first(mapMetrics(data.metrics)),
    };

    return formatedData
    
}