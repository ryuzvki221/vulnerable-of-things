import { Connection } from "../../config/Database";
import { Vulnerability } from "../models";

export const VulnerabilityRepository = Connection.getRepository(Vulnerability).extend({
  bulkCreate(vulnerabilities: Vulnerability[]) {
    return this.manager
      .createQueryBuilder()
      .insert()
      .into(Vulnerability)
      .values(vulnerabilities)
      .execute();
  },
  
  // find one and display relationships
  findByCveId(cveId: string) {
    return this.createQueryBuilder("vulnerability")
      .where("vulnerability.cveId = :cveId", { cveId })
      .leftJoinAndSelect("vulnerability.affected", "affected")
      .leftJoinAndSelect("vulnerability.metrics", "metrics")
      .leftJoinAndSelect("vulnerability.weaknesses", "weaknesses")
      .leftJoinAndSelect("vulnerability.references", "references")
      .getOne();
  },
  findOneById(id: number) {
    return this.createQueryBuilder("vulnerability")
      .where("vulnerability.id = :id", { id })
      .getOne()

  },

  findByProduct(product: string) {
    return this.createQueryBuilder("vulnerability")
      .where("vulnerability.product = :product", { product })
      .leftJoinAndSelect("vulnerability.affected", "affected")
      .leftJoinAndSelect("vulnerability.metrics", "metrics")
      .leftJoinAndSelect("vulnerability.weaknesses", "weaknesses")
      .leftJoinAndSelect("vulnerability.references", "references")
      .getMany();
  },

  findByVendor(vendor: string) {
    return this.createQueryBuilder("vulnerability")
      .where("vulnerability.vendor = :vendor", { vendor })
      .leftJoinAndSelect("vulnerability.affected", "affected")
      .leftJoinAndSelect("vulnerability.metrics", "metrics")
      .leftJoinAndSelect("vulnerability.weaknesses", "weaknesses")
      .leftJoinAndSelect("vulnerability.references", "references")
      .getMany();
  },

  

});
